<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link rel="stylesheet" href="styles.css">
    <style>
        #paymentMethod {
            width: 300px;
        }
        label {
            font-size: large;
        }
        option, select {
            font-size: large;
        }
        .form-select {
            font-size: 2rem;
        }
         .wallet-balance {
            font-size: 1.2rem;
            color: #28a745;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Checkout</h2>

        <table class="table" id="cartTable">
            <thead>
                <tr>
                    <th scope="col">Product Name</th>
                    <th scope="col">Quantity</th>
                    <th scope="col">Price (per item)</th>
                    <th scope="col">Discount %</th>
                </tr>
            </thead>
            <tbody id="cartItems">
                {{#each cartItems}}
                <tr data-product-id="{{this.productId}}">
                    <td>{{this.name}}</td>
                    <td>{{this.quantity}}</td>
                    <td>{{this.price}} ₹</td>
                    <td>{{this.discount}} %</td>
                </tr>
                {{/each}}
            </tbody>
        </table>

        <div class="summary">
            <h4>Order Summary</h4>
            <p>Total Price Before Discount: <span id="totalPriceBeforeDiscount">{{summary.totalPriceBeforeDiscount}}</span> ₹</p>
            <p>Total Discount: <span id="totalDiscount">{{summary.totalDiscount}}</span> ₹</p>
            <p>Discounted Price: <span id="discountedPrice">{{summary.discountedPrice}}</span> ₹</p>
            <p>Shipping Charge: <span id="shippingCharge">{{summary.shippingCharge}}</span> ₹</p>
            <p>Total Payable Amount: <span id="totalAmountToBePaid">{{summary.totalAmountToBePaid}}</span> ₹</p>
        </div>

      <!-- Coupon Section -->
        <div class="coupon-section">
            <h3>Available Coupons</h3>
            <button class="btn btn-info" data-toggle="modal" data-target="#couponModal">View Coupons</button>
           
        </div>

        <!-- Coupon Code Input -->
        <div class="coupon-code-section mt-3">
            <h4>Enter Coupon Code</h4>
            <div class="input-group">
                <input type="text" id="couponCode" class="form-control" placeholder="Enter coupon code">
                <div class="input-group-append">
                   {{!-- <button class="btn btn-primary" type="button" onclick="validateCoupon()">Apply</button> --}}
                </div>
                
            </div>
            <p id="couponMessage" class="text-danger mt-2"></p>

         <button id="remove-coupon-btn" style="display:none;">Remove Coupon</button>
        </div>


        <div class="address-selection">
            <h4>Delivery Address</h4>
            {{#each addresses}}
            <div class="form-check">
                <input class="form-check-input" type="radio" name="address" id="address{{@index}}" value="{{this._id}}" onchange="updateSelectedAddress('{{this._id}}')">
                <label class="form-check-label" for="address{{@index}}">
                    {{this.houseName}}, {{this.street}}, {{this.district}}, {{this.state}}, {{this.pincode}}
                </label>
            </div>
           
            <br><br>
            
            <a href="/edit-address?id={{this._id}}" class="btn btn-sm btn-primary edit">✎ Edit Address</a>
             <button class="btn btn-primary" onclick="addNewAddress()">Add New Address</button>
              {{/each}}
            <input type="hidden" id="selectedAddressId" name="selectedAddressId" value="">
        </div>
           <div class="wallet-balance m-4">
            <strong style="font-size: larger;">Wallet Balance:</strong> {{walletBalance}} ₹
        </div>
        <div class="mb-3">
            <label for="paymentMethod" class="form-label">Select Payment Method</label>
            <select class="form-select" id="paymentMethod" name="paymentMethod" required>
                <option value="">Select Payment Method</option>
                <option value="cash_on_delivery">Cash On Delivery</option>
                <option value="online_payment">Online Payment</option>
                 <option value="wallet" class="wallet-option">Wallet Payment</option>
            </select>
        </div>

        <button id="placeOrderButton" class="btn btn-primary">Place Order</button>
    </div>

     <!-- Coupon Modal -->
   <div class="modal fade" id="couponModal" tabindex="-1" aria-labelledby="couponModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="couponModalLabel">Available Coupons</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                {{#if coupons.length}}
                <ul class="list-group" id="couponList">
                    {{#each coupons}}
                    <li class="list-group-item">
                        <strong>{{this.code}}</strong> - {{this.discount}}% off (Min Purchase: ₹{{this.minPurchaseAmount}})
                        <button class="btn btn-primary btn-sm float-right apply-coupon" data-coupon-code="{{this.code}}">Apply</button>
                    </li>
                    {{/each}}
                </ul>
                {{else}}
                <p>No coupons available for your purchase amount.</p>
                {{/if}}
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>

         function updateSelectedAddress(addressId) {
            document.getElementById('selectedAddressId').value = addressId;
        }
   let appliedCoupon = null; // Store the applied coupon details

    document.addEventListener('DOMContentLoaded', function() {
        const removeCouponBtn = document.getElementById('remove-coupon-btn');
        const couponMessage = document.getElementById('couponMessage');

        if (removeCouponBtn) {
            removeCouponBtn.addEventListener('click', function() {
                removeCoupon();
            });
        }

        // Handle coupon apply from modal
        document.addEventListener('click', function(event) {
            if (event.target.classList.contains('apply-coupon')) {
                const couponCode = event.target.getAttribute('data-coupon-code');
                document.getElementById('couponCode').value = couponCode;
                validateCoupon().then(() => {
                    $('#couponModal').modal('hide'); // Hide the modal after applying coupon
                });
            }
        });

        window.validateCoupon = async function() {
            const couponCode = document.getElementById('couponCode').value;

            try {
                const response = await fetch('/coupons');
                const coupons = await response.json();
                const selectedCoupon = coupons.find(coupon => coupon.code === couponCode);

                if (selectedCoupon) {
                    if (appliedCoupon && appliedCoupon.code !== couponCode) {
                        // Remove previous coupon if any
                        removeCoupon();
                    }
                     if (appliedCoupon && appliedCoupon.code === couponCode) {
                couponMessage.innerText = '';
                return;
            }
                    const totalPriceBeforeDiscount = parseFloat(document.getElementById('totalPriceBeforeDiscount').innerText);
                    const previousDiscount = parseFloat(document.getElementById('totalDiscount').innerText) || 0;

                    const couponDiscountPercentage = selectedCoupon.discount;
                    const couponDiscountAmount = (totalPriceBeforeDiscount * couponDiscountPercentage) / 100;
                    const newTotalDiscount = previousDiscount + couponDiscountAmount;
                    const newDiscountedPrice = totalPriceBeforeDiscount - newTotalDiscount;
                    const shippingCharge = parseFloat(document.getElementById('shippingCharge').innerText);
                    const newTotalAmountToBePaid = newDiscountedPrice + shippingCharge;

                    document.getElementById('totalDiscount').innerText = newTotalDiscount.toFixed(2);
                    document.getElementById('discountedPrice').innerText = newDiscountedPrice.toFixed(2);
                    document.getElementById('totalAmountToBePaid').innerText = newTotalAmountToBePaid.toFixed(2);

                    appliedCoupon = selectedCoupon;
                    couponMessage.innerText = 'Coupon applied successfully!';
                    document.getElementById('remove-coupon-btn').style.display = 'block';
                } else {
                    couponMessage.innerText = 'Invalid coupon code or coupon has expired.';
                    appliedCoupon = null;
                }
            } catch (error) {
                console.error('Error validating coupon:', error);
                couponMessage.innerText = 'An error occurred while validating the coupon.';
            }
        };

        function removeCoupon() {
            if (appliedCoupon) {
                const totalPriceBeforeDiscount = parseFloat(document.getElementById('totalPriceBeforeDiscount').innerText);
                const couponDiscountPercentage = appliedCoupon.discount;
                const couponDiscountAmount = (totalPriceBeforeDiscount * couponDiscountPercentage) / 100;
                const previousDiscount = parseFloat(document.getElementById('totalDiscount').innerText);
                const newTotalDiscount = previousDiscount - couponDiscountAmount;
                const newDiscountedPrice = totalPriceBeforeDiscount - newTotalDiscount;
                const shippingCharge = parseFloat(document.getElementById('shippingCharge').innerText);
                const newTotalAmountToBePaid = newDiscountedPrice + shippingCharge;

                document.getElementById('totalDiscount').innerText = newTotalDiscount.toFixed(2);
                document.getElementById('discountedPrice').innerText = newDiscountedPrice.toFixed(2);
                document.getElementById('totalAmountToBePaid').innerText = newTotalAmountToBePaid.toFixed(2);

                appliedCoupon = null;
                document.getElementById('couponCode').value = '';
                document.getElementById('remove-coupon-btn').style.display = 'none';
                couponMessage.innerText = 'Coupon removed successfully!';
            }
        }

        function getCartItems() {
            const rows = document.querySelectorAll('#cartItems tr');
            return Array.from(rows).map(row => {
                const cells = row.querySelectorAll('td');
                return {
                    productId: row.getAttribute('data-product-id'), // Retrieve product ID from data attribute
                    name: cells[0].innerText,
                    quantity: parseInt(cells[1].innerText),
                    price: parseFloat(cells[2].innerText.replace(' ₹', '')),
                    discount: parseFloat(cells[3].innerText.replace(' %', ''))
                };
            });
        }

        function getOrderSummary() {
            const totalPriceBeforeDiscount = parseFloat(document.getElementById('totalPriceBeforeDiscount').innerText);
            const totalDiscount = parseFloat(document.getElementById('totalDiscount').innerText);
            const discountedPrice = parseFloat(document.getElementById('discountedPrice').innerText);
            const shippingCharge = parseFloat(document.getElementById('shippingCharge').innerText);
            const totalAmountToBePaid = parseFloat(document.getElementById('totalAmountToBePaid').innerText);

            return {
                totalPriceBeforeDiscount: totalPriceBeforeDiscount,
                totalDiscount: totalDiscount,
                discountedPrice: discountedPrice,
                shippingCharge: shippingCharge,
                totalAmountToBePaid: totalAmountToBePaid
            };
        }

       
           function addNewAddress() {
            window.location.href = '/profile/add-address'; 
        }

        function editAddress(addressId) {
    window.location.href = `/edit-address?id=${addressId}`;
}


    document.getElementById('placeOrderButton').addEventListener('click', async function(event) {
    event.preventDefault();

    const selectedAddressId = document.getElementById('selectedAddressId').value;
    const paymentMethod = document.getElementById('paymentMethod').value;

    if (!selectedAddressId) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Please select a delivery address!',
            confirmButtonText: 'OK'
        });
    } else if (!paymentMethod) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Please select a payment method!',
            confirmButtonText: 'OK'
        });
    } else {
        const cartItems = getCartItems();
        const orderSummary = getOrderSummary();
        const orderDetails = {
            addressId: selectedAddressId,
            paymentMethod: paymentMethod,
            coupon: appliedCoupon, // Include the applied coupon details
            cartItems: cartItems,
            orderSummary: orderSummary
        };

        try {
             const response = await fetch(paymentMethod === 'cash_on_delivery' || paymentMethod === 'wallet' ? '/place-order' : '/create-order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderDetails)
            });

            const data = await response.json();
            if (response.ok) {
                if (paymentMethod === 'online_payment') {
                    const options = {
                        key: data.razorpayKeyId,
                        amount: data.totalAmountToBePaid * 100,
                        currency: 'INR',
                        name: 'Your Website Name',
                        description: 'Purchase Order',
                        order_id: data.razorpayOrderId,
                        handler: async function(response) {
                            try {
                                const verifyResponse = await fetch('/verify-payment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        payment_id: response.razorpay_payment_id,
                                        signature: response.razorpay_signature,
                                        orderDetails: orderDetails,
                                         razorpayOrderId: data.razorpayOrderId,
                                         order_id: data.orderId,
                                          paymentStatus:"success",
                                    })
                                });

                                const verifyData = await verifyResponse.json();
                                if (verifyResponse.ok) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Payment successful!',
                                        text: 'Your order has been placed successfully.',
                                        confirmButtonText: 'OK'
                                    }).then(() => {
                                        window.location.href = `/order-confirmation/${data.orderId}`;
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Payment Failed',
                                        text: verifyData.message,
                                        confirmButtonText: 'OK'
                                    });
                                }
                            } catch (error) {
                                console.error('Error verifying payment:', error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Payment Failed',
                                    text: 'An error occurred while verifying your payment. Please try again.',
                                    confirmButtonText: 'OK'
                                });
                            }
                        },
                        modal: {
                            ondismiss: function() {
                                handlePaymentFailure(data.orderId);
                            }
                        },
                        prefill: {
                            name: 'Customer Name',
                            email: 'customer@example.com',
                            contact: '9999999999'
                        },
                        notes: {
                            address: 'Customer Address'
                        },
                        theme: {
                            color: '#F37254'
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.on('payment.failed', function (response) {
                        console.log('Payment failed:', response.error);
                        handlePaymentFailure(data.orderId);
                    });

                    rzp.open();
                } else {
                    Swal.fire({
                        icon: 'success',
                        title: 'Order placed successfully!',
                        text: 'Your order has been placed successfully.',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = `/order-confirmation/${data.orderId}`;
                    });
                }
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Order Failed',
                    text: data.message,
                    confirmButtonText: 'OK'
                });
            }
        } catch (error) {
            console.error('Error placing order:', error);
            Swal.fire({
                icon: 'error',
                title: 'Order Failed',
                text: 'An error occurred while placing your order. Please try again.',
                confirmButtonText: 'OK'
            });
        }
    }
});

const handlePaymentFailure = (orderId,) => {
    fetch('/update-payment-status', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId: orderId, paymentStatus: 'failed' })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'error',
                title: 'Payment Cancelled',
                text: 'Your payment was cancelled. Please try again.',
                confirmButtonText: 'OK'
            }).then(() => {
                window.location.href = '/order-history';
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Failed to update payment status',
                text: 'An error occurred while updating the payment status.',
                confirmButtonText: 'OK'
            });
        }
    })
    .catch(error => {
        console.error('Error updating payment status:', error);
        Swal.fire({
            icon: 'error',
            title: 'Failed to update payment status',
            text: 'An error occurred while updating the payment status.',
            confirmButtonText: 'OK'
        });
    });
}
 })

    </script>
</body>
</html>
