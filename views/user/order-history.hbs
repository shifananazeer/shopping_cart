<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order History</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    
    <style>
        /* Custom styles */
        .return-btn {
            background-color: #28a745; /* Green */
            color: white;
        }
        .return-btn:hover {
            background-color: #218838;
        }
        .btn-repay {
            background-color: #007bff; /* Blue */
            color: white;
        }
        .btn-repay:hover {
            background-color: #0056b3;
        }
        .cancel-order-button {
            background-color: #dc3545; /* Red */
            color: white;
        }
        .cancel-order-button:hover {
            background-color: #c82333;
        }
         .wide-table {
            width: 100%;
        }
        .conta{
            width: 90%;
           margin: auto;
        }
    </style>
</head>
<body>

    <div class="conta mt-5">
          <div class="page-header text-center" style="background-image: url('assets/images/page-header-bg.jpg')">
                <div class="container">
                    <h1 class="page-title">Orders <span>History</span></h1>
                </div><!-- End .container -->
            </div><!-- End .page-header -->
        {{#if orders.length}}
            {{!-- <h1 class="mb-4">Order History</h1> --}}
            <div class="table-responsive">
                <table class="table table-bordered table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Image</th>
                            <th>Product Name</th>
                            <th>Product Price</th>
                            <th>Order ID</th>
                            <th>Date</th>
                            <th>Total Amount</th>
                            <th>payment Method</th>
                            <th>Status</th>
                            <th>Payment Status</th>
                            <th>Details/Cancel</th>
                            <th>Return/Invoice</th>
                            <th>Repay</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each orders}}
                            {{#each items}}
                                <tr>
                                    <td>
                                        {{#if this.productImage}}
                                            <img src="/{{this.productImage}}" alt="Product Image" class="img-fluid" style="width: 50px; height: auto;">
                                        {{else}}
                                            No Image
                                        {{/if}}
                                    </td>
                                    <td>{{ this.productName }}</td>
                                    <td>{{ this.productPrice }} ₹</td>
                                    <td>{{ ../orderId }}</td>
                                    <td>{{ formatDate ../createdAt }}</td>
                                    <td>{{ ../summary.totalAmountToBePaid }} ₹</td>
                                    <td>{{../paymentMethod}}</td>
                                    <td>{{ ../status }}</td>
                                    <td>{{ ../paymentStatus }}</td>
                                    <td>
                                        <a href="/order-details/{{ ../orderId }}" class="btn btn-primary m-2">View Details</a>
                                     {{#if (and (eq ../status "pending") (or (eq ../paymentStatus "pending") (eq ../paymentStatus "success")))}}
                                              <button class="btn cancel-order-button" data-order-id="{{../orderId}}">Cancel</button>
                                      {{/if}}
                                    </td>
                                    <td>
                                      
                                        {{#if (eq ../status 'delivered')}}
                                            <a href="/orders/{{../orderId}}/return" class="return-btn btn">Return Order</a>
                                        {{/if}}

                                             {{#if (eq ../status 'delivered')}}
                            <a href="/invoice/{{../orderId}}" class=" mt-2 btn btn-warning">Invoice</a>
                                  {{/if}}
                                    </td>
                                    <td>
                                        {{#if (eq ../paymentStatus "failed")}}
                                            <button class="btn btn-repay" onclick="handleRepay('{{../orderId}}')">Repay</button>
                                        {{/if}}
                                     
                                    </td>
                                   
                                </tr>
                            {{/each}}
                        {{/each}}
                    </tbody>
                </table>
            </div>
        {{else}}
            <p>No orders found.</p>
        {{/if}}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Cancel order event listener
            document.querySelectorAll('.cancel-order-button').forEach(button => {
                button.addEventListener('click', function () {
                    const orderId = this.getAttribute('data-order-id');

                    Swal.fire({
                        title: 'Are you sure?',
                        text: "You won't be able to revert this!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, cancel it!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch(`/cancel-order/${orderId}`, {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire(
                                        'Cancelled!',
                                        'Your order has been cancelled.',
                                        'success'
                                    ).then(() => {
                                        window.location.reload(); // Refresh the page to reflect changes
                                    });
                                } else {
                                    Swal.fire(
                                        'Error!',
                                        data.message,
                                        'error'
                                    );
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                Swal.fire(
                                    'Error!',
                                    'An error occurred while cancelling the order.',
                                    'error'
                                );
                            });
                        }
                    });
                });
            });

            // Repay function
            window.handleRepay = function(orderId) {
                {{!-- alert('handleRepay called');  --}}
                
                console.log('Initiating repayment for Order ID:', orderId);
                
                fetch(`/repay-order/${orderId}`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Data from server:', data);
                    
                    if (data.success) {
                        const options = {
                            key: data.razorpayKeyId,
                            amount: data.totalAmountToBePaid * 100, 
                            currency: 'INR',
                            name: 'Your Website Name',
                            description: 'Purchase Order',
                            order_id: data.razorpayOrderId,
                            handler: async function(response) {
                                try {
                                    const verifyResponse = await fetch('/verify-payment', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify({
                                            payment_id: response.razorpay_payment_id,
                                            order_id: data.orderId,
                                            signature: response.razorpay_signature,
                                            razorpayOrderId: data.razorpayOrderId,
                                            paymentStatus: "success",
                                        })
                                    });

                                    const verifyData = await verifyResponse.json();
                                    console.log('Verify Payment Response:', verifyData);

                                    if (verifyResponse.ok) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Payment Successful!',
                                            text: 'Your payment has been processed successfully.',
                                            confirmButtonText: 'OK'
                                        }).then(() => {
                                            window.location.href = `/order-confirmation/${data.orderId}`;
                                        });
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Payment Failed',
                                            text: verifyData.message,
                                            confirmButtonText: 'OK'
                                        });
                                    }
                                } catch (error) {
                                    console.error('Error verifying payment:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Payment Verification Failed',
                                        text: 'An error occurred while verifying your payment. Please try again.',
                                        confirmButtonText: 'OK'
                                    });
                                }
                            },
                            prefill: {
                                name: 'Customer Name',
                                email: 'customer@example.com',
                                contact: '9999999999'
                            },
                            notes: {
                                address: 'Customer Address'
                            },
                            theme: {
                                color: '#F37254'
                            }
                        };

                        const rzp = new Razorpay(options);
                        rzp.on('payment.failed', function (response) {
                            console.log('Payment failed:', response.error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Payment Failed',
                                text: response.error.description,
                                confirmButtonText: 'OK'
                            });
                        });

                        rzp.open();
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message,
                            confirmButtonText: 'OK'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error initiating repayment:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while initiating repayment. Please try again.',
                        confirmButtonText: 'OK'
                    });
                });
            };
        });
    </script>
</body>
</html>
