
   
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            background-color: #f9f9f9;
            margin: 0;
            padding: 0;
        }

        .heading {
            text-align: center;
            margin-bottom: 20px;
        }

        .filter-sort-dropdown label {
            margin-right: 10px;
        }
        
        .filter-sort-dropdown select,
        .filter-sort-dropdown input[type="checkbox"] {
            margin-right: 10px;
        }

        .product-item {
            background: #fff;
            border: 1px solid #ddd;
            padding: 15px;
            box-sizing: border-box;
            text-align: center;
        }

        .product-item:hover {
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .product-item a {
            text-decoration: none;
            color: #333;
        }

        .product-image img {
            max-width: 100%;
            height: auto;
        }

        .product-details {
            text-align: center;
            margin-top: 10px;
        }

        .product-name {
            font-size: 2.1rem;
            margin-bottom: 5px;
        }

        .product-prices {
            margin-top: 5px;
        }

        .product-discounted-price {
            color: #e74c3c;
            font-weight: bold;
        }

        .product-original-price {
            color: #7f8c8d;
            text-decoration: line-through;
            margin-left: 5px;
        }

        .product-discount {
            color: #27ae60;
            margin-left: 5px;
        }

        .stock-status {
            margin-top: 10px;
        }

        .out-of-stock {
            color: red;
        }

        .in-stock {
            color: green;
        }
        {{!-- .inputSearch {
            width: 50%;
            border-radius: 30px;
           margin: 3rem;
           height: 40px;
             box-shadow: 0 8px 16px 0 
            rgba(0, 0,0, 0.24),0 17px 50px 0 
            rgba(0, 0,0,0.19); 

        } --}}
        .product {
           box-shadow: 0 8px 16px 0 
            rgba(0, 0,0, 0.24),0 17px 50px 0 
            rgba(0, 0,0,0.19);   
            border-radius: 10px;
        }
         .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }
        .pagination a {
            margin: 0 5px;
            padding: 8px 16px;
            text-decoration: none;
            background-color: #f1f1f1;
            color: #333;
            border: 1px solid #ddd;
            border-radius: 4px;
            transition: background-color 0.3s;
            
        }

        .pagination a:hover {
            background-color: #ddd;
        }

        .pagination a.active {
            background-color: #333;
            color: white;
            border: 1px solid #333;
        }

        .pagination a.prev,
        .pagination a.next {
            font-weight: bold;
        }

        button, input, optgroup, select, textarea {
    margin: 0;
    font-family: inherit;
    font-size: 1.3rem;
    line-height: inherit;
}
         @media (max-width: 992px) {
    .filter-sort-dropdown {
        flex-direction: column;
        align-items: stretch;
    }

    .filter-sort-dropdown label {
        margin-bottom: 5px; 
    }
  
    .filter-sort-dropdown select,
    .filter-sort-dropdown input[type="checkbox"] {
        margin-bottom: 10px;
        flex: none;
        width:50%;
    }

    .filter-sort-dropdown label,
    .filter-sort-dropdown select,
    .filter-sort-dropdown input[type="checkbox"] {
        display: block;

    }
   

    .filter-sort-dropdown label {
        margin-bottom: 5px; 
    }
}

.filter-sort-dropdown {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding: 10px;
    background-color: #fff;
    border-radius: 5px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}
 .filter-sort-dropdown select,
        .filter-sort-dropdown input[type="checkbox"] {
            margin-right: 82px;
            margin-bottom: 3px;
        }

.filter-sort-dropdown label {
    font-weight: bold;
    color: #333;
}

.filter-sort-dropdown select {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 5px;
    transition: border-color 0.3s;
    width: 150px; 
}

.filter-sort-dropdown select:hover {
    border-color: #007bff;
}

.filter-sort-dropdown input[type="checkbox"] {
    margin-left: 5px;
}

        .product-grid {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 1rem;
        }
        .product-grid .product {
            flex: 1 1 calc(25% - 1rem);
            max-width: calc(25% - 1rem);
            box-sizing: border-box;
        }
        @media (max-width: 992px) {
            .product-grid .product {
                flex: 1 1 calc(33.33% - 1rem);
                max-width: calc(33.33% - 1rem);
            }
        }
        @media (max-width: 768px) {
            .product-grid .product {
                flex: 1 1 calc(50% - 1rem);
                max-width: calc(50% - 1rem);
            }
        }
        @media (max-width: 480px) {
            .product-grid .product {
                flex: 1 1 100%;
                max-width: 100%;
            }
        }
  .search-form {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
        }
        .search-form input[type="text"] {
            width: 500px;
            padding: 10px;
            border: 2px solid #ccc;
            border-radius: 6px 0 0 6px;
            outline: none;
            transition: border-color 0.3s;
        }
        .search-form input[type="text"]:focus {
            border-color: #007bff;
        }
        .search-form button {
            padding: 10px 20px;
            border: 2px solid #066689;
            background-color: #247197;
            color: white;
            border-radius: 0 4px 4px 0;
            cursor: pointer;
            transition: background-color 0.3s, border-color 0.3s;
            font-size: 16px; /* Adjust font size */
            font-weight: bold; /* Make text bold */
            text-transform: uppercase; /* Capitalize text */
            letter-spacing: 1px; /* Add letter spacing */
        }
        .search-form button:hover {
            background-color: #04070b;
            border-color: #7aace1;
        }
        @media (max-width: 600px) {
            .search-form {
                flex-direction: column;
                align-items: center;
            }
            .search-form input[type="text"],
            .search-form button {
                width: 100%;
                border-radius: 4px;
                margin: 5px 0;
            }
            .search-form button {
                border-radius: 4px;
            }
        }
        
    </style>



  <div class="page-header text-center" style="background-image: url('images/header.jpg')">
                <div class="container">
                    <h1 class="page-title">Explore <span>Products</span></h1>
                </div><!-- End .container -->
            </div><!-- End .page-header -->

   
        <div class="container">
         
       <div class="filter-sort-dropdown">
            <form id="filterForm">
                <label for="categoryFilter">Filter by Category:</label>
                <select id="categoryFilter" name="category" onchange="applyFilterAndSort()">
                    <option value="">All Categories</option>
                    {{#each categories}}
                    <option value="{{this.name}}" {{#if (eq this.name ../filter.category)}}selected{{/if}}>{{this.name}}</option>
                    {{/each}}
                </select>

                <label for="brandFilter">Filter by Brand:</label>
                <select id="brandFilter" name="brand" onchange="applyFilterAndSort()">
                    <option value="">All Brands</option>
                    {{#each brands}}
                    <option value="{{this.name}}" {{#if (eq this.name ../filter.brand)}}selected{{/if}}>{{this.name}}</option>
                    {{/each}}
                </select>

                <label for="Psort">Price Sort:</label>
                <select id="Psort" name="Psort" onchange="applyFilterAndSort()">
                    <option value="">Default</option>
                    <option value="1" {{#if (eq Psort '1')}}selected{{/if}}>Price: Low to High</option>
                    <option value="-1" {{#if (eq Psort '-1')}}selected{{/if}}>Price: High to Low</option>
                </select>

                <label for="ratingSort">Sort by Rating:</label>
                <select id="ratingSort" name="Rsort" onchange="applyFilterAndSort()">
                    <option value="">Default</option>
                    <option value="1" {{#if (eq Rsort '1')}}selected{{/if}}>Low to High</option>
                    <option value="-1" {{#if (eq Rsort '-1')}}selected{{/if}}>High to Low</option>
                </select>

                <label for="Asort">Alphabetical Sort:</label>
                <select id="Asort" name="Asort" onchange="applyFilterAndSort()">
                    <option value="">Default</option>
                    <option value="1" {{#if (eq Asort '1')}}selected{{/if}}>A to Z</option>
                    <option value="-1" {{#if (eq Asort '-1')}}selected{{/if}}>Z to A</option>
                </select>

                <label for="inStockOnly">In Stock Only:</label>
                 <input type="checkbox" id="inStockOnly" name="inStockOnly" value="true" onchange="applyFilterAndSort()" {{#if (eq filter.inStockOnly 'true')}}checked{{/if}}>
            </form>

        </div>
         <form id="searchForm" class="search-form mt-5" onsubmit="event.preventDefault(); applyFilterAndSort();">
            <input type="text" name="searchQuery" placeholder="Search products..." class="inputSearch " value="{{filter.searchQuery}}">
            <button type="submit" class="searchbtn">Search</button>
        </form>


      

         <div class="product-grid">
            {{#each products}}
            <div class="product product-3 text-center">
                <figure class="product-media">
                    <a href="/product-details/{{this._id}}">
                        <img src="{{this.images.[0]}}" alt="Product image" class="product-image">
                    </a>
                    
                  <div class="product-action-vertical">
     {{#contains this._id ../wishlistItems}}
            <a href="#" id="wishlist-btn-{{this._id}}" class="btn-product-icon btn-wishlist btn-expandable" style="float: right; margin-top: 5px;" onclick="removeFromWishlist('{{this._id}}')">
                <span>Added to wishlist</span>
            </a>
        {{else}}
            <a href="#" id="wishlist-btn-{{this._id}}" class="btn-product-icon btn-wishlist btn-expandable" style="float: right; margin-top: 5px;" onclick="addToWishlist('{{this._id}}')">
                <span>Add to wishlist</span>
            </a>
        {{/contains}}
</div>
                </figure><!-- End .product-media -->

                <div class="product-body">
                    <div class="product-cat">
                        <a href="#">{{this.brand.name}}</a>
                    </div><!-- End .product-cat -->
                    <h3 class="product-title"><a href="product.html">{{this.name}}</a></h3><!-- End .product-title -->
                    <div class="product-price text-dark">
                        {{#if this.discount}}
                        <span style="font-weight: bolder;" class="product-discounted-price mr-2">
                              ₹ {{calcDiscountedPrice this.price this.productDiscount this.category.discount}}
                               </span>
                        <div>
                            <span style="color: red;" class="product-original-price">
                                <del>₹ {{this.price}}</del>
                            </span>
                            <span class="text-success ml-3">{{this.discount}}% Off</span>
                        </div>
                        {{/if}}
                    </div><!-- End .product-price -->
                </div><!-- End .product-body -->
               <div class="product-foot">
    {{#if this.stock}}
        <div>
            <button type="button" class="btn btn-secondary  btn-block" data-product-id="{{this._id}}" onclick="addToCart(this)"> <i class="fas fa-shopping-cart"></i>Add to cart</button>
        </div>
    {{else}}
        <div>
            <button type="button" class="btn btn-danger btn-lg btn-block" disabled>Out of stock</button>
        </div>
    {{/if}}
</div>
            </div><!-- End .product -->
            {{/each}}
        </div><!-- End .product-grid -->


        <!-- Pagination Controls -->
        <div class="pagination">
            {{#if (gt currentPage 1)}}
            <a href="/products?page={{subtract currentPage 1}}&sort={{sort}}&filter={{filter}}&inStockOnly={{inStockOnly}}" class="prev">Previous</a>
            {{/if}}
            {{#each (range 1 totalPages)}}
            <a href="/products?page={{this}}&sort={{sort}}&filter={{filter}}&inStockOnly={{inStockOnly}}" class="{{#if (eq this ../currentPage)}}active{{/if}}">{{this}}</a>
            {{/each}}
            {{#if (lt currentPage totalPages)}}
            <a href="/products?page={{add currentPage 1}}&sort={{sort}}&filter={{filter}}&inStockOnly={{inStockOnly}}" class="next">Next</a>
            {{/if}}
        </div>
    </div>

    <!-- Script for adding to cart -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>

        //add product to cart-----------------------
        async function addToCart(button) {
            const productId = button.getAttribute('data-product-id');

            try {
                const response = await fetch(`/add-to-cart?productId=${productId}`, {
                    method: 'GET'
                });
                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        text: 'Product successfully added to cart',
                        icon: 'success',
                        showConfirmButton: false,
                        timer: 2000,
                        customClass: {
                            title: 'text-success',
                            popup: 'swal2-popup-custom'
                        }
                    });
                       updateCartCount();
                } else if (data.message === 'User not logged in') {
                    Swal.fire({
                        text: 'You must be logged in to add products to the cart',
                        icon: 'warning',
                        confirmButtonText: 'OK'
                    });
                } else {
                    Swal.fire({
                        text: data.message,
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            } catch (error) {
                console.error('Error adding to cart:', error);
            }
        }
//filter apply and sorting --------------------------
    function applyFilterAndSort() {
            const searchForm = document.getElementById('searchForm');
            const filterForm = document.getElementById('filterForm');
            const searchQuery = new URLSearchParams(new FormData(searchForm)).toString();
            const filterParams = new URLSearchParams(new FormData(filterForm)).toString();
            const combinedParams = searchQuery + '&' + filterParams;
            window.location.href = `/products?${combinedParams}`;
        }
    function handleSearchKeyPress(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                event.target.form.submit();
            }
        }


//add products to wishlist------------------------------
async function addToWishlist(productId) {
    try {
        const response = await fetch(`/wishlist/add/${productId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const result = await response.json();
        if (result.success) {
           
            Swal.fire({
                icon: 'success',
                title: 'Added to Wishlist!',
                showConfirmButton: false,
                timer: 2000,
            });
            updateWishlistCount();
            document.querySelector(`#wishlist-btn-${productId}`).innerHTML = '<span>Added to wishlist</span>';
            document.querySelector(`#wishlist-btn-${productId}`).setAttribute('onclick', `removeFromWishlist('${productId}')`);
        } else {
            alert(result.message);
        }
    } catch (error) {
        console.error('Error adding to wishlist:', error);
    }
}

//remove products from wishlist -----------------------------
async function removeFromWishlist(productId) {
    try {
        const response = await fetch(`/wishlist/remove/${productId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const result = await response.json();
        if (result.success) {
             Swal.fire({
                icon: 'success',
                title: 'Removed from Wishlist!',
                showConfirmButton: false,
                timer: 2000,
            });
            document.querySelector(`#wishlist-btn-${productId}`).innerHTML = '<span>Add to wishlist</span>';
            document.querySelector(`#wishlist-btn-${productId}`).setAttribute('onclick', `addToWishlist('${productId}')`);
        } else {
            alert(result.message);
        }
    } catch (error) {
        console.error('Error removing from wishlist:', error);
    }
}
    </script>
   




